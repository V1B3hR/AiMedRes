version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: duetmind_postgres
    environment:
      POSTGRES_DB: duetmind_mlops
      POSTGRES_USER: duetmind
      POSTGRES_PASSWORD: duetmind_secret
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - mlops-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U duetmind -d duetmind_mlops"]
      interval: 30s
      timeout: 10s
      retries: 5

  minio:
    image: minio/minio:latest
    container_name: duetmind_minio
    environment:
      MINIO_ROOT_USER: duetmind
      MINIO_ROOT_PASSWORD: duetmind_secret_key
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - mlops-network
    command: server /data --console-address ":9001"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  mlflow:
    image: python:3.11-slim
    container_name: duetmind_mlflow
    working_dir: /mlflow
    environment:
      MLFLOW_BACKEND_STORE_URI: postgresql://duetmind:duetmind_secret@postgres:5432/duetmind_mlops
      MLFLOW_DEFAULT_ARTIFACT_ROOT: s3://mlflow-artifacts
      AWS_ACCESS_KEY_ID: duetmind
      AWS_SECRET_ACCESS_KEY: duetmind_secret_key
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000
    ports:
      - "5001:5000"
    networks:
      - mlops-network
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    volumes:
      - ./mlflow_requirements.txt:/mlflow/requirements.txt
    command: >
      bash -c "
      pip install -r requirements.txt &&
      mlflow server 
        --backend-store-uri postgresql://duetmind:duetmind_secret@postgres:5432/duetmind_mlops
        --default-artifact-root s3://mlflow-artifacts
        --host 0.0.0.0 
        --port 5000
      "
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Optional: Adminer for database management
  adminer:
    image: adminer:latest
    container_name: duetmind_adminer
    ports:
      - "8080:8080"
    networks:
      - mlops-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  minio_data:
    driver: local

networks:
  mlops-network:
    driver: bridge